// To demonstrate the adjacency list
// Representation of graphs
#include <stdio.h>
#include <stdlib.h>
// A structure to represent an adjacency list node
struct AdjListNode
{
 int dest;
 struct AdjListNode* next;
};
// A structure to represent an adjacency list
struct AdjList
{
 struct AdjListNode *head;
};
// Size of array will be V (number of vertices in graph)
struct Graph
{
 int V;
 struct AdjList* array;
};
// A utility function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest)
{
 struct AdjListNode* newNode =
 (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
 newNode->dest = dest;
 newNode->next = NULL;
 return newNode;
}
struct Graph* createGraph(int V)
{
 struct Graph* graph =
 (struct Graph*) malloc(sizeof(struct Graph));
 graph->V = V;
 graph->array =
 (struct AdjList*) malloc(V * sizeof(struct AdjList));
 // Initialize each adjacency list as empty by making head as NULL
 int i;
 for (i = 0; i < V; ++i)
 graph->array[i].head = NULL;
 return graph;
}
// Adds an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest)
{
 struct AdjListNode* newNode = newAdjListNode(dest);
 newNode->next = graph->array[src].head;
 graph->array[src].head = newNode;
 // Since graph is undirected, add an edge from dest to src also
 newNode = newAdjListNode(src);
 newNode->next = graph->array[dest].head;
 graph->array[dest].head = newNode;
}
// A utility function to print the adjacency list representation of graph
void printGraph(struct Graph* graph)
{
 int v;
 for (v = 0; v < graph->V; ++v)
 {
 struct AdjListNode* pCrawl = graph->array[v].head;
 printf("\n Adjacency list of vertex %d\n head ", v);
 while (pCrawl)
 {
 printf("-> %d", pCrawl->dest);
 pCrawl = pCrawl->next;
 }
 printf("\n");
 }
}
int main()
{
 // create the graph
 int V = 8;
 struct Graph* graph = createGraph(V);
 addEdge(graph, 0, 1);
 addEdge(graph, 0, 2);
 addEdge(graph, 0, 6);
 addEdge(graph, 1, 2);
 addEdge(graph, 1, 3);
 addEdge(graph, 2, 3);
 addEdge(graph, 2, 4);
 addEdge(graph, 3, 4);
 addEdge(graph, 3, 7);
 addEdge(graph, 4, 5);
 addEdge(graph, 4, 6);
 addEdge(graph, 5, 6);
 addEdge(graph, 5, 7);
 // print the adjacency list representation of the above graph
 printGraph(graph);
 return 0;
}
